// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceDesk.Assets.Storage;

#nullable disable

namespace ServiceDesk.Assets.Storage.Migrations
{
    [DbContext(typeof(AssetsDbContext))]
    partial class AssetsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServiceDesk.Assets.Storage.Entities.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssetType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InventoryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Technician")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Assets");

                    b.HasDiscriminator().HasValue("Asset");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ServiceDesk.Assets.Storage.Entities.Cable", b =>
                {
                    b.HasBaseType("ServiceDesk.Assets.Storage.Entities.Asset");

                    b.Property<string>("CableType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShielded")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Cable");
                });

            modelBuilder.Entity("ServiceDesk.Assets.Storage.Entities.Computer", b =>
                {
                    b.HasBaseType("ServiceDesk.Assets.Storage.Entities.Asset");

                    b.Property<string>("GraphicsCardModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasGraphicsCard")
                        .HasColumnType("bit");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Processor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RAMSize")
                        .HasColumnType("int");

                    b.Property<int>("StorageSize")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Computer");
                });

            modelBuilder.Entity("ServiceDesk.Assets.Storage.Entities.Device", b =>
                {
                    b.HasBaseType("ServiceDesk.Assets.Storage.Entities.Asset");

                    b.Property<string>("Connectivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPortable")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Device");
                });

            modelBuilder.Entity("ServiceDesk.Assets.Storage.Entities.Monitor", b =>
                {
                    b.HasBaseType("ServiceDesk.Assets.Storage.Entities.Asset");

                    b.Property<bool>("IsCurved")
                        .HasColumnType("bit");

                    b.Property<string>("PanelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefreshRate")
                        .HasColumnType("int");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScreenSize")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Monitor");
                });

            modelBuilder.Entity("ServiceDesk.Assets.Storage.Entities.PDU", b =>
                {
                    b.HasBaseType("ServiceDesk.Assets.Storage.Entities.Asset");

                    b.Property<string>("ConnectionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsManaged")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPowerOutput")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPorts")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PDU");
                });

            modelBuilder.Entity("ServiceDesk.Assets.Storage.Entities.Phone", b =>
                {
                    b.HasBaseType("ServiceDesk.Assets.Storage.Entities.Asset");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMEI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSmartphone")
                        .HasColumnType("bit");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StorageSize")
                        .HasColumnType("int");

                    b.ToTable("Assets", t =>
                        {
                            t.Property("OperatingSystem")
                                .HasColumnName("Phone_OperatingSystem");

                            t.Property("StorageSize")
                                .HasColumnName("Phone_StorageSize");
                        });

                    b.HasDiscriminator().HasValue("Phone");
                });

            modelBuilder.Entity("ServiceDesk.Assets.Storage.Entities.Printer", b =>
                {
                    b.HasBaseType("ServiceDesk.Assets.Storage.Entities.Asset");

                    b.Property<bool>("HasScanner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsColor")
                        .HasColumnType("bit");

                    b.Property<int>("PaperCapacity")
                        .HasColumnType("int");

                    b.Property<int>("PrintSpeed")
                        .HasColumnType("int");

                    b.Property<string>("PrinterType")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Printer");
                });

            modelBuilder.Entity("ServiceDesk.Assets.Storage.Entities.Rack", b =>
                {
                    b.HasBaseType("ServiceDesk.Assets.Storage.Entities.Asset");

                    b.Property<bool>("IsVentilated")
                        .HasColumnType("bit");

                    b.Property<int>("MaxWeight")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfUnits")
                        .HasColumnType("int");

                    b.Property<int>("PowerCapacity")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Rack");
                });

            modelBuilder.Entity("ServiceDesk.Assets.Storage.Entities.Simcard", b =>
                {
                    b.HasBaseType("ServiceDesk.Assets.Storage.Entities.Asset");

                    b.Property<DateTime>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanType")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Assets", t =>
                        {
                            t.Property("Carrier")
                                .HasColumnName("Simcard_Carrier");

                            t.Property("PhoneNumber")
                                .HasColumnName("Simcard_PhoneNumber");
                        });

                    b.HasDiscriminator().HasValue("Simcard");
                });

            modelBuilder.Entity("ServiceDesk.Assets.Storage.Entities.Software", b =>
                {
                    b.HasBaseType("ServiceDesk.Assets.Storage.Entities.Asset");

                    b.Property<DateTime>("LicenseExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicenseKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Software");
                });
#pragma warning restore 612, 618
        }
    }
}
